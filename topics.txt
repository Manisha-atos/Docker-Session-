Day 1:
docker 
images ---> container--->run time enviro
docker -v
docker info
docker images
docker ps 
docker pull centos
docker container create -it centos
docker container create --name x-centos -it centos
docker start  <container id/name >
docker exec -it <container id/name> /bin/bash
docker stop <container id/name>

docker rmi <image id>
docker rm container id/name>


docker rmi $(docker images -q)
docker rm $(docker ps -a -q)

docker run -it centos bash   
docker run --name a-centos -it centos bash

docker rin --name a-nginx nginx 

docker run --name b-nginx -p  2222:80 -d nginx
docker exec -it a-nginx bash

docker exec -it b-nginx bash 
echo "<h1>Hello B-NgInx Server </h1>" > /usr/share/nginx/html/index.html

cat /usr/share/nginx/html/index.html

Day 2:

Creat MySQL Container
=====================
mysql
============


docker run --name p-mysql -e MYSQL_ROOT_PASSWORD=manisha -p 3232:3306 -d mysql:5.6


docker logs p-mysql

docker exec -it p-mysql bash

#mysql -uroot -pmanisha

mysql> show databases



networking concept
=====================
bridge
host
none

docker network ls
creare 2 containers 
docker run --name a-centos -it centos
docker run --name b-centos -it centos
docker ps -a
docker start a-centos
docker start b-centos
docker inspect bridge

communicate netween containers.
172.17.0.2

docker exec -it a-centos bash
$ ping 172.17.0.2(ip of b-centos)

172.17.0.3--mysql

172.17.0.1 --apache


;
container in the bridge network communicatee with each other with the help of deafult bridge network we will not able to communicate with container name.

custom default bridge network
==============================
docker network create demo-network  -->default will create bridge network
docker network create demo-network 
docker run --name c-centos --network demo-network -it centos bash 
docker run --name d-centos --network demo-network -it centos bash

docker start c-centos d-centos
docker ps --shows all 4 conta
docker  network inspect demo-network--->(c,d)
docker network inspect ---->(a,b) 172.17 is default


docker exec --it c-centos bash
ping d-centos  -->will able to communicate with ip and container name

to add existing container we use connect command, one container we can add to multiple networks.


https://atos365-my.sharepoint.com/:f:/g/personal/manisha_mane_atos_net/EnDvExneGmZImEHWFHw-I1ABfvL3DNqmWUg1naAdSEbySg?e=LCwClf

https://atos365-my.sharepoint.com/:x:/r/personal/manisha_mane_atos_net/Documents/9%20Oct%20Git%20Attendance.xlsx?d=w08df2facbc1c47a5ba2b0a949f4b0263&csf=1&web=1&e=ZKWaEx

https://forms.office.com/e/tKYBjF3R42

Day 3:
======
Demo 1:
MySQL container
================
$ docker run --name demo-mysql -e MYSQL_ROOT_PASSWORD=manisha -d mysql
-e:enviroment
-d:detached mode

check th logs
docker logs demo-mysql
docker ps :will show mysql started on port no 3306 , we can not access it as it is in default network . we can not access it outside of the network.

docker exec -it demo-mysql bash 
mysql -uroot -pmanisha 

Demo 2:MongoDB container
--->Downloading the Latest MongoDB Docker Image
docker pull mongo #Pulls the latest one
or 
docker pull mongo:4.0.4 #Pulls the specific version

--->Deploying an Instance of MongoDB as a Container
docker run --name mongodb mongo:4.0.4

--> To check out on the logs for the image
docker logs mongodb
(Displays entire information of the container while starting as well the confirguration details if it has started successfully)
-->docker start mongodb

--->Interacting with the MongoDB Docker Container with Basic Shell Operations
docker exec -it mongodb bash

-it: stands for interactive mode

--> To communication with mongodb
Example: mongo

--> Show databases
show dbs;

--> To create a database
use trainingdb;

--> Switch to database
trainingdb

--> To create a collection
db.departments.insert({name:'Admin'});
db.departments.insert({name:'Training'});
db.departments.insert({name:'Quality'});
db.departments.insert({name:'HR'});

-->Fetch the data
db.departments.find()

Demo 3:
command to create tomcat container.
docker run --name a-tomcat -p 1212:8080 -d tomcat
docker start a-tomcat bash
cd conf


port forwardization
=======================
httpd:80,nginx:80 
mysql:3306
mongodb:27017

All containers are created with in the default network ,outer rectangle is docker host where docker engine installed. containers will not be available outside the network to access them externally we do port forwardization.


============================
======================================
we can create multiple containers in one go with docker compose 

docker  inspect network bride: will show mysql 
create containers for webserver
web servers :httpd    default port :80
            :nginx    default port :80
            :mysql    default port :3306
            :mongodb  default port :27017   

Demo1 with Sandbox

docker run --name a-nginx -p  1111:80 -d nginx
docker run --name b-nginx -p  2222:80 -d nginx
docker run --name c-nginx -p  3333:80 -d nginx
-p:port forwardization 
internal port is 80 but we are exposing container on 1111
docker ps --- all containers are exposed to external port numbers.

docker exec -it a-nginx bash
echo "<h1>Hello A-NgInx Server </h1>" > /usr/share/nginx/html/index.html

docker exec -it b-nginx bash
echo "<h1>Hello B-NgInx Server </h1>" > /usr/share/nginx/html/index.html

docker exec -it c-nginx bash
echo "<h1>Hello C-NgInx Server </h1>" > /usr/share/nginx/html/index.html

Demo2: Docker desktop /toolbox
localhost:1111
localhost:2222



=======================================================
-- rm will remove the container after exit , doesnt work in -d mode

docker run --it --rm tomcat:9.0-- will 
docker run --rm --name b-tomcat -p 1111:8080 -it  tomcat:9.0 bash
exit
docker ps -a -- will not show b-tomcat
-------------------------------------------------------


3. Image creation 
Images (Documentation: https://docs.docker.com/engine/reference/commandline/docker/)

--->Lists the images available locally
docker images 
or
docker image list
or
docker image ls

Notes:
- The TAG refers to a particular snapshot of the image 
- IMAGE ID is the corresponding unique identifier for that image.
- you can think of an image akin to a git repository
--->Where are Images Stored
(1) Registries (e.g. docker hub)
(2) Can be stored locally or remote

--->Pulling an image from the repository
docker pull ubuntu
docker pull ubuntu:18.04 

Notes:
- images can be committed with changes and have multiple versions.If you don't provide a specific version number, the client defaults to latest

Example: Commiting the Image in the container (mongodb)
--------------------------------------------
--->Downloading the Latest MongoDB Docker Image
docker pull mongo #Pulls the latest one
or 
docker pull mongo:4.0.4 #Pulls the specific version

--->Deploying an Instance of MongoDB as a Container
docker run --name mongodb mongo:4.0.4

--> To check out on the logs for the image
docker logs mongodb
(Displays entire information of the container while starting as well the confirguration details if it has started successfully)
-->docker start mongodb

--->Interacting with the MongoDB Docker Container with Basic Shell Operations
docker exec -it mongodb bash

-it: stands for interactive mode

--> To communication with mongodb
Example: mongo

--> Show databases
show dbs;

--> To create a database
use trainingdb;

--> Switch to database
trainingdb

--> To create a collection
db.departments.insert({name:'Admin'});
db.departments.insert({name:'Training'});
db.departments.insert({name:'Quality'});
db.departments.insert({name:'HR'});

-->Fetch the data
db.departments.find()

Day 4:
=======
Creating Custom Images:
================================
standar images are available on docker h
ubuntu
https
tomcat
mongodb

we can create custom images in 2  ways
1. Creating image  from running container  (docker commit command)
========================================
docker rmi $(docker images -q)
Step 1: create a container
docker run --name a-httpd -p 1111:80 -d httpd :create httpd container

step 2:change the contents of html file
docker exec -it a-https bash :exec container ls :check htdocs folder with ls command
echo "<h1>Hello Welcome To Custom Apache Image</h1>" > /usr/local/apache2/htdocs/index.html:change index.html 

step 3: commit the changes
docker commit -m 'Modified Index Page' -a 'Manisha Mane <manisha.mane@atos.net>' a-httpd manishaato/httpdApachImage1:1.1

-m:commit msg
-a: author
<docker hub id>/<ImageName>:version(optional)

http
step 4:Push image to docker hub

docker login
username:manishaatoa
password:

docker push httpdApachImage1:1.1



2.Creating image  from scratch(docker build command)

for this we use Dockerfile : 
A text file with instructions to build image
Automation of Docker Image Creation
we need Base Image
Docker File (Instructions used for Image creation)
===========
FROM           :manishak8/a-ubuntu_1
MAINTAINER     :Author Name
ENV            :Environment variable
ADD            :ADD the files while buiding the image
RUN            :To install libraries/packages (executed while building the image) aptupdate,apt-getupdate
ENTRYPOINT     :Executed at run time and we can not override the commands
CMD            :Executed at run time and we can override by passing command line argument

whenever we start/create container which command to execute we specify with entrypoint and CMD
CMD echo "Hello"
ENTRYPOINT ["echo","hello"]

Step 1 : Create a file named Dockerfile
Step 2 : Add instructions in Dockerfile
Step 3 : Build dockerfile to create image
Step 4 : Run image to create container

Exanple:Dockerfile
Step 1 : Create a file named Dockerfile

$vi Dockerfile

Step 2 : Add instructions in Dockerfile
copy the below code

FROM ubuntu
MAINTAINER Manisha Mane <pimplemp@rediffmail.com>
RUN apt-get update
CMD ["echo", "Hello World..! from my first docker iamge1"]
CMD ["echo", "Hello World..! from my first docker iamge2"]
CMD ["echo", "Hello World..! from my first docker iamge3"]
CMD ["echo", "Hello World..! from my first docker iamge4"]

Note: CMD can be written multiple times but the last one will be called
Step 3 : Build dockerfile to create image
$ docker build -t zaffer/a-ubuntu:1.1 .(current directory)
-t --taging name to Image 


docker build -t manishak8/a-ubuntu_1:1.1 .

here -t is for tagging image
dot is for the current dir where Dockerfile is created
You may createmultiple images from the dockerfile

$ docker build -t b-ubuntu:1.1 .

step 4: you can optionally push the image to docker hub
docker push  manishaatos/a-ubuntu:1.1

docker push manishak8/a-ubuntu_1:1.1

docker run  echo "Hello friends"


step 5:
docker run --name c1 manishaatos/a-ubuntu:1.1

Using ENTRYPOINT
modify the Dockerfile as below

FROM manishak8/a-ubuntu_1:1.1
MAINTAINER Manisha Mane <pimplemp@rediffmail.com>
RUN apt-get update
ENTRYPOINT ["echo", "Hello World..! from my first docker iamge1"]
ENTRYPOINT ["echo", "Hello World..! from my first docker iamge2"]
ENTRYPOINT ["echo", "Hello World..! from my first docker iamge3"]
ENTRYPOINT ["echo", "Hello World..! from my first docker iamge4"]

The main difference between CMD and ENTRYPOINT is ENTRYPOINT  allows appending new contents while running docker container

$ docker build -t testentry .

docker build -t zaffer/a-ubuntu_1:1.2 .
// optionally if dockerfile name is different give any other filename
$ docker build -f Somefile -t testentry1 .

$ docker run testentry1
$ docker run c echo "Hello friends"

docker run --name test1 zaffer/a-ubuntu_1:1.2 echo "dockerfile demo"


Using ENTRYPOINT
modify the Dockerfile as below

FROM ubuntu
MAINTAINER Chhaya Nikam <chhaya.nikam@gmail.com>
RUN apt-get update

ENTRYPOINT ["echo", "Hello World..! from my first docker iamge1"]
ENTRYPOINT ["echo", "Hello World..! from my first docker iamge2"]
ENTRYPOINT ["echo", "Hello World..! from my first docker iamge3"]
ENTRYPOINT ["echo", "Hello World..! from my first docker iamge4"]

The main difference between CMD and ENTRYPOINT is ENTRYPOINT  allows appending new contents while running docker container

$ docker build -t testentry .
// optionally if dockerfile name is different give any other filename
$ docker build -f Somefile -t testentry1 .
$ docker run testentry1
$ docker run c echo "Hello friends"

CMD and ENTRYPOINT can also used in combinations

Example:

Docker file for MYSQL
=======================
Step 1: vi script.sql
script.sql
===========
use company;
create table employee(id int primary key,name text,salary double);
insert into employee values(101,'RAM',10000.00);
insert into employee values(102,'RAHIM',20000.00);
insert into employee values(103,'DAVID',30000.00);
insert into employee values(104,'Jack',40000.00);

Step 2:
vi Dockerfile
# Derived from official mysql image (our base image)
FROM mysql
# Add a database
ENV MYSQL_DATABASE company
ENV MYSQL_ROOT_PASSWORD admin
ENV MYSQL_USER user1
ENV MYSQL_PASSWORD 123
# Add the content of the sql-scripts/ directory to your image
# All scripts in docker-entrypoint-initdb.d/ are automatically
# executed during container startup
ADD script.sql /docker-entrypoint-initdb.d/

$ docker build -t manishak8/p-mysql_1:5.3 .
$ docker images
$docker run --name a-mysql -d p-mysql:5.1
$docker exec -it a-mysql bash
#mysql -uroot -padmin

docker push manishak8/p-mysql:5.3
docker pull manishak8/p-myslq:5.3
docker run --name s1 -d maishak8/p-mysql:5.3
docker exec -it a-mysql bash
mysql -uroot -padmin

Image for Java Application
==========================
Prepare the Image For Java Application
========================================

Employee.java
====================
package com;
public class Employee{
public static void main(String args[]){
for(int i=0;i<=10;i++)
System.out.println("Welcome To Java Docker Application!!!");
}
}

Dockerfile
===========
FROM openjdk:8
ADD Employee.java  
RUN javac Employee.java -d . 
ENTRYPOINT ["java","com.Employee"]


To build a Java Image
=====================
docker build -t jana4docker/p-java-app:1.1 .


To Push a Java Image
=====================
docker push jana4docker/p-java-app:1.1


To Create a container
=====================
docker run jana4docker/p-java-app:1.1
=======================================================================================


Day 4:
======
Docker Compose (start ,stop,scale multiple containers at same time )
=============================================================
docker-compose :utility
docker-compose -v
Docker compose

It is a utility tool for defining & running multi-container docker applications
use yaml files to configure application services (docker-compose.yml)
can start all services with a single command : docker-compose up
can stop all services with a single command : docker-compose down  Stops containers and removes containers, networks, volumes, and images created by up
can scale up selected services when required


Step 1 : install docker compose
   (already installed on windows and mac with docker)
   docker-compose -v

   2 Ways

   1.  https://github.com/docker/compose/rel...

   2. Using PIP
    pip install -U docker-compose

Step 2 : Create docker compose file at any location on your system
   docker-compose.yaml

version: '3'
services:
  web:
    image: nginx
  database:
    image: redis


Step 3 : Check the validity of file by command
    docker-compose config  :check syntax of yaml file.


docker network ls
there is no "root_default" now execute the below it should create this network

Step 4 : Run docker-compose.yml file by command
   docker-compose up -d
$docker ps
$docker inspect network root_default

so docker-compose internally creates a custom bridge network.
 Note :
Steps 5 : Bring down application by command
 $  docker-compose down
 $docker inspect network root-default

TIPS
How to scale services

scale
docker-compose up -d --scale database=4

docker-compose up -d --scale web=4


ocker Volume
===============

1. What are Volumes
2. How to create / list / delete volumes
3. How to attach volume to a container
4. How to share volume among containers
5. What are bind mounts

Volumes are the preferred mechanism for persisting data generated by and used by Docker containers


docker volume  //get information
docker volume create
docker volume ls
docker volume inspect
docker volume rm
docker volume prune

docker volume create mydata
docker run --name mysql03 -v mydata  -e MYSQL_ROOT_PASSWORD=Password1234 -d mysql
docker volumn inspect mydata
docker ps -a --filter=mydata
docker volume ls
cd /var/lib/docker/volumes/mydata/_data

docker run -it --rm -v jmydata:/vol busybox ls -l /vol
total 428

for v in $(docker volume ls --format "{{.Name}}")
do  
	containers="$(docker ps -a --filter volume=$v --format '{{.Names}}' | tr '\n' ',')"  
	echo "volume $v is used by $containers"
done
docker inspect mysql04
"Volumes": {
                "/var/lib/mysql": {},
                "mydata": {}

Use of Volumes
===================
Decoupling container from storage
Share volume (storage/data) among different containers
Attach volume to container
On deleting container volume does not delete

docker volume create mydata

Commands
docker run --name MyJenkins1 -v mydata:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins:2.60.3


docker run --name MyJenkins2 -v myvol1:/var/jenkins_home -p 9090:8080 -p 60000:50000 jenkins

docker run --name MyJenkins3 -v /Users/raghav/Desktop/Jenkins_Home:/var/jenkins_home -p 9191:8080 -p 40000:50000 jenkins


References
https://hub.docker.com/_/jenkins/
https://docs.docker.com/storage/volumes/


Day 5
======
step 1:enable docker swarm at 192.168.0.11
docker swarm init --advertise-addr=<ip>
docker swarm init --advertise-addr=192.168.0.28
docker node ls
step 2 :add other nodes to docker swarm (192.168.0.13)
cmd 1:
docker swarm join-token worker
o/p:o add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-52pv2bec08tk7k3915qoxroclmksoesa1mmo8mpzcdun641ok3-ckj5b86q4kgu7uc5sb9mptkjr 192.168.0.11:2377

docker swarm join --token SWMTKN-1-44pdj689ee9uo5tdaxatjk3k8z2rots6jr3vaphajw92q6udqh-1uolez9zufvb0y7xnzyrse279 192.168.0.5:2377


    docker swarm join --token SWMTKN-1-3zvi9ygqm87xndr8c8qyzzs017uu08tk99wgyu555x9ktxfpfa-2lv852bwxn8puw81nq1sxcukf 192.168.0.28:2377

    docker swarm join --token SWMTKN-1-37ad1aefa3b7cc5d15dff9903afbd55c5eff26e914a129fffd446e532741dec5f 192.168.0.11:2377

Error response from daemon: remote CA does not match fingerprint. Expected: 7ad1aefa3b7cc5d15dff9903afbd55c5eff26e914a129fffd446e532741dec5f
step 3:(on master node)
docker node ls 
step 4:(creating all master nodes)
docker node promote node1 node2 node4

docker network ls -->new nw ingress is added.
create a service
https://docs.docker.com/engine/reference/commandline/service_create/
docker service ls
docker service create --name p-nginx --replicas=4 -p 4444:80 nginx

internally load balancing will happen between various m/c

docker service --help
docker service ps p-nginx




we cannot expose container on same port with in the node so we are using ingress nw
docker service scale p-nginx=6
docker service scale p-nginx=3

docker service rm

out f 6 3 containers are running. the node which is shutdow still can show 1111 page due to load balancing.


